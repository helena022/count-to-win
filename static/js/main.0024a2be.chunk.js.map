{"version":3,"sources":["components/CountButton/CountButton.js","components/PointsToWin/PointsToWin.js","components/CounterWrapper/CounterWrapper.js","App.js","reportWebVitals.js","index.js"],"names":["CountButton","props","useState","currentCount","setCurrentCount","pointsValue","useContext","PointsToWinContext","setDidWin","DidWinContext","didWin","useEffect","countDisplayStyle","backgroundColor","teamColor","backgroundImage","style","className","team","onClick","alert","setTimeout","toUpperCase","PointsToWin","shouldDisplayInput","setShouldDisplayInput","setPointsValue","tempPointsValue","setTempPointsValue","type","value","onChange","event","target","Number","createContext","CounterWrapper","Provider","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kSAkEeA,EA9DK,SAACC,GAAU,MAEaC,mBAAS,GAFtB,mBAEpBC,EAFoB,KAENC,EAFM,KAKpBC,EAAeC,qBAAWC,GAA1BF,YACAG,EAAaF,qBAAWG,GAAxBD,UACAE,EAAUJ,qBAAWG,GAArBC,OA+BPC,qBAAU,WACFD,IACAN,EAAgB,GAChBI,GAAU,MAEb,CAACA,EAAWE,IAGjB,IAAME,EAAoB,CACtBC,gBAAiBZ,EAAMa,UACvBC,gBAAiBd,EAAMc,iBAI3B,OACI,sBAAKC,MAAOJ,EAAmBK,UAAU,OAAzC,UACKhB,EAAMiB,KACP,qBAAKD,UAAW,gBAAhB,SAAkCd,IAClC,wBAAQgB,QA7BgB,WACxBhB,EAAe,EACfC,EAAgBD,EAAe,IAG/BC,EAAgB,GAChBgB,MAAM,kCAuBN,eACA,wBAAQD,QA/CY,WAErBhB,GAAgBE,EAAc,GAC7BD,EAAgBD,EAAe,GAE/BkB,YAAW,WACPD,MAAMnB,EAAMiB,KAAKI,cAAgB,UACjCd,GAAU,KACV,KAIJJ,EAAgBD,EAAe,IAmC/B,mBCEGoB,G,MA3DK,WAAM,MAE8BrB,oBAAS,GAFvC,mBAEfsB,EAFe,KAEKC,EAFL,KAKfpB,EAAeC,qBAAWC,GAA1BF,YACAqB,EAAkBpB,qBAAWC,GAA7BmB,eANe,EASwBxB,mBAASG,GATjC,mBASfsB,EATe,KASEC,EATF,KAuCtB,OACI,sBAAKX,UAAW,mBAAhB,WACMO,GACE,sBAAKP,UAAW,iBAAhB,UAAmCZ,EAC/B,wBAAQc,QA/BC,WACrBM,GAAsB,IA8BV,qBAGPD,GACG,sBAAKP,UAAW,cAAhB,UACI,uBAAOY,KAAK,SAASC,MAAOH,EAAiBI,SA/BnC,SAACC,GACvBJ,EAAmBI,EAAMC,OAAOH,UA+BpB,sBAAKb,UAAU,UAAf,UACI,wBAAQY,KAAK,SAASV,QA5BnB,SAACa,GAEhBE,OAAOP,IAIXD,EAAeC,GAEfF,GAAsB,IALlBL,MAAM,0BAyBM,gBACA,wBAAQS,KAAK,SAASV,QAjBf,SAACa,GACxBP,GAAsB,IAgBN,+BClDXlB,G,MAAqB4B,2BACrB1B,EAAgB0B,0BA6BdC,EA3BQ,WAAM,MAEWlC,mBAAS,IAFpB,mBAEpBG,EAFoB,KAEPqB,EAFO,OAGCxB,oBAAS,GAHV,mBAGpBQ,EAHoB,KAGZF,EAHY,KAM3B,OACE,qBAAKS,UAAU,kBAAf,SAGE,eAACV,EAAmB8B,SAApB,CAA6BP,MAAO,CAACzB,cAAaqB,kBAAlD,UAEE,cAAC,EAAD,IAEA,cAACjB,EAAc4B,SAAf,CAAwBP,MAAO,CAACpB,SAAQF,aAAxC,SACE,sBAAKS,UAAU,QAAf,UACE,cAAC,EAAD,CAAaH,UAAW,UAAWC,gBAAiB,mDAAoDG,KAAK,WAC7G,cAAC,EAAD,CAAaJ,UAAW,UAAWC,gBAAiB,mDAAoDG,KAAK,sBCb1GoB,MARf,WACE,OACE,qBAAKrB,UAAU,MAAf,SACE,cAAC,EAAD,OCKSsB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,qBAAKjC,UAAU,QAAf,SACE,cAAC,EAAD,QAGJkC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0024a2be.chunk.js","sourcesContent":["import React, {useState, useContext, useEffect, createContext} from \"react\";\r\nimport \"./CountButton.css\";\r\nimport { DidWinContext, PointsToWinContext } from \"../CounterWrapper/CounterWrapper\";\r\n\r\nconst CountButton = (props) => {\r\n    // count button state declarations\r\n    const [currentCount, setCurrentCount] = useState(0);\r\n\r\n    // imported contexts\r\n    const {pointsValue} = useContext(PointsToWinContext);\r\n    const {setDidWin} = useContext(DidWinContext);\r\n    const {didWin} = useContext(DidWinContext);\r\n\r\n    // handles +1 button\r\n    const handleClickAddition = () => {\r\n        // if clicking the button would result in winning, trigger win alert and set didWin state to true\r\n        if(currentCount >= pointsValue - 1){\r\n            setCurrentCount(currentCount + 1);\r\n            \r\n            setTimeout(function(){ \r\n                alert(props.team.toUpperCase() + \" WINS!\");\r\n                setDidWin(true); }, \r\n                50);\r\n            \r\n        } else {\r\n            // if win conditions aren't met add +1 to currentCount\r\n            setCurrentCount(currentCount + 1);\r\n        } \r\n    }\r\n\r\n    // handles -1 button\r\n    const handleClickSubstraction = () => {\r\n        if (currentCount > 0){\r\n            setCurrentCount(currentCount - 1);\r\n        } else {\r\n            // handles event where team score would go under 0\r\n            setCurrentCount(0);\r\n            alert(\"Team points can't go under 0\");      \r\n        }   \r\n    }\r\n\r\n    // if didWin context is true (one team reached score to win), resets the counter\r\n    useEffect(() => {\r\n        if (didWin){\r\n            setCurrentCount(0);\r\n            setDidWin(false);\r\n        }\r\n      }, [setDidWin, didWin]);\r\n\r\n    // style object\r\n    const countDisplayStyle = {\r\n        backgroundColor: props.teamColor,\r\n        backgroundImage: props.backgroundImage\r\n    }\r\n    \r\n    // renders the score display div with +1 and -1 buttons\r\n    return (\r\n        <div style={countDisplayStyle} className=\"team\">\r\n            {props.team}\r\n            <div className={\"count-display\"}>{currentCount}</div>\r\n            <button onClick={handleClickSubstraction}>-</button>\r\n            <button onClick={handleClickAddition}>+</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CountButton;","import React, {useContext, useState} from \"react\";\r\nimport { PointsToWinContext } from \"../CounterWrapper/CounterWrapper\";\r\nimport \"../PointsToWin/PointsToWin.css\";\r\n\r\nconst PointsToWin = () => {\r\n    // state that enables score needed to win to be edited when true\r\n    const [shouldDisplayInput, setShouldDisplayInput] = useState(false);\r\n\r\n    // imports pointsValue state from context\r\n    const {pointsValue} = useContext(PointsToWinContext);\r\n    const {setPointsValue} = useContext(PointsToWinContext);\r\n\r\n    // state to store input temporarily, enables canceling the input and reverting pointsValue to previous state\r\n    const [tempPointsValue, setTempPointsValue] = useState(pointsValue);\r\n\r\n    // edit button\r\n    const handleEditButton = () => {\r\n        setShouldDisplayInput(true);\r\n    }\r\n\r\n    // handles input change\r\n    const handleInputChange = (event) => {\r\n        setTempPointsValue(event.target.value);\r\n    }\r\n\r\n    // handles ok button to accept new input and checks if input is a number\r\n    const handleOkButton = (event) => {\r\n       \r\n        if(!Number(tempPointsValue)){\r\n            alert(\"Please enter a number\");\r\n            return;\r\n        }\r\n        setPointsValue(tempPointsValue);\r\n        //alert(\"New win condition is \" + tempPointsValue + \" points\");\r\n        setShouldDisplayInput(false);\r\n    }\r\n\r\n    // handles cancel button\r\n    const handleCancelButton = (event) => {\r\n        setShouldDisplayInput(false);\r\n    }\r\n\r\n    // renders the points needed to win display and number input\r\n    return (\r\n        <div className={\"points-container\"}>\r\n            {!shouldDisplayInput && (\r\n                <div className={\"points-display\"}>{pointsValue}\r\n                    <button onClick={handleEditButton}>edit</button>\r\n                </div>\r\n            )}\r\n            {shouldDisplayInput && (\r\n                <div className={\"edit-points\"}>\r\n                    <input type=\"number\" value={tempPointsValue} onChange={handleInputChange} />\r\n                    <div className=\"buttons\">\r\n                        <button type=\"submit\" onClick={handleOkButton}>ok</button>\r\n                        <button type=\"submit\" onClick={handleCancelButton}>cancel</button>\r\n                    </div>\r\n                </div>\r\n                )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PointsToWin;\r\n","import React, {useState, createContext} from \"react\";\r\nimport CountButton from \"../CountButton/CountButton\";\r\nimport PointsToWin from \"../PointsToWin/PointsToWin\";\r\nimport \"./CounterWrapper.css\";\r\n\r\nexport const PointsToWinContext = createContext(); \r\nexport const DidWinContext = createContext();\r\n\r\nconst CounterWrapper = () => {\r\n  // CounterWrapper state declarations\r\n  const [pointsValue, setPointsValue] = useState(10);\r\n  const [didWin, setDidWin] = useState(false);\r\n\r\n  // renders PointsToWin component and two CountButtons\r\n  return (\r\n    <div className=\"counter-wrapper\">\r\n      \r\n      {/* provides pointsValue state to PointsToWin and CountButton components*/}\r\n      <PointsToWinContext.Provider value={{pointsValue, setPointsValue}}>\r\n        \r\n        <PointsToWin />\r\n        {/* provides didWin state to CountButton components */}\r\n        <DidWinContext.Provider value={{didWin, setDidWin}}>\r\n          <div className=\"teams\">\r\n            <CountButton teamColor={\"#fce043\"} backgroundImage={\"linear-gradient(315deg, #fce043 0%, #fb7ba2 74%)\"} team=\"Team 1\" />\r\n            <CountButton teamColor={\"#5de6de\"} backgroundImage={\"linear-gradient(315deg, #5de6de 0%, #b58ecc 74%)\"} team=\"Team 2\" />\r\n          </div>\r\n        </DidWinContext.Provider>\r\n\r\n      </PointsToWinContext.Provider>\r\n      \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CounterWrapper;\r\n","import React from \"react\";\r\nimport \"./styles/App.css\"\r\nimport CounterWrapper from \"./components/CounterWrapper/CounterWrapper\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <CounterWrapper />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <div className=\"index\">\r\n      <App />\r\n    </div>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}